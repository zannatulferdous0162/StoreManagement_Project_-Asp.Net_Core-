@model StoreManagement_Project.ViewModels.GRNViewModel

@{
    ViewData["Title"] = "Create GRN";
}

<h2>Create Item Receieved</h2>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row">
        <div class="col-md-4">
        <div class="form-group">
            <label asp-for="SupplierId">Supplier</label>
            <select asp-for="SupplierId" class="form-control" asp-items="Model.Suppliers" id="supplierDropdown">
                <option value="">-- Select Supplier --</option>
            </select>
        </div>
        </div>

        <div class="col-md-4">
        <div class="form-group">
            <label asp-for="PurchaseOrderId">Purchase Order ID</label>
            <select asp-for="PurchaseOrderId" class="form-control" asp-items="Model.PurchaseOrders" id="poDropdown">
                <option value="">-- Select PO --</option>
            </select>
        </div>
        </div>
        <div class="col-md-4">
        <div class="form-group">
            <label asp-for="WarehouseId">Warehouse</label>
            <select asp-for="WarehouseId" class="form-control" id="warehouseDropdown" >
                <option value="">-- Select Warehouse --</option>
                 @foreach (var warehouse in Model.Warehouses)
                 {
                   <option value="@warehouse.WarehouseId" data-address="@warehouse.Address">
                    @warehouse.Name
                    </option> 
                 }
            </select>
        </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="ReceivedDate">Received Date</label>
                <input asp-for="ReceivedDate" class="form-control" type="date"  />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="InvoiceDate"></label>
                <input asp-for="InvoiceDate" class="form-control" type="date" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="InvoiceNo"></label>
                <input asp-for="InvoiceNo" class="form-control" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <label asp-for="ReceivedBy"></label>
        <input asp-for="ReceivedBy" class="form-control" placeholder="Enter any specific requirements or notes..." />
    </div>

    <hr />
    <h4>Items</h4>
    <table class="table" id="itemsTable">
        <thead>
            <tr>
                <th>Item</th>
                <th>Location</th>
                <th>Ordered Qty</th>
                <th>Unit</th>
                <th>Qty Receive</th>
                <th>Remaining Qty</th>
                <th>
                    Inspection
                    <input type="checkbox" id="checkAllInspection" />
                </th>                
            </tr>
        </thead>
        <tbody id="itemRows">
            <!-- Filled via JS -->
        </tbody>
    </table>

    <input type="hidden" asp-for="GRNNumber" />

    <button type="submit" class="btn btn-primary">Save GRN</button>
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</form>

<div class="modal fade" id="locationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Location</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <ul id="locationList" class="list-group">
                    <!-- populated by JS -->
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function () {
            let locations = [],   // current warehouse’s locations
                currentRow = null;

            // 1) When PO changes: clear rows, generate GRN#, fetch items & warehouse
            $('#poDropdown').change(function () {
                const poId = $(this).val();
                $('#itemRows').empty();
                $('#warehouseDropdown').val("").prop('disabled', true);

                if (!poId) return;

                // Generate GRN number
                $.getJSON(`/GRN/GenerateGRNNumber?purchaseOrderId=${poId}`, no => {
                    $('input[name="GRNNumber"]').val(no);
                });

                // Fetch PO items
                $.getJSON(`/GRN/GetPOItems?purchaseOrderId=${poId}`, items => {
                    if (!items.length) {
                        $('#itemRows').append(`
                    <tr>
                      <td colspan="7" class="text-center text-danger">
                        All items in this PO already received.
                      </td>
                    </tr>`);
                    } else {
                        $.each(items, (i, item) => addRow(i, item));
                    }
                });

                // Lock in warehouse and trigger its change to load locations
                $.getJSON(`/GRN/GetWarehouseByPO?purchaseOrderId=${poId}`, wh => {
                    if (wh) {
                        $('#warehouseDropdown')
                            .val(wh.warehouseId)
                            .prop('disabled', true)
                            .trigger('change');
                    }
                });
            });

            // 2) When Warehouse changes: fetch its LocationComponents
            $('#warehouseDropdown').change(function () {
                const whId = $(this).val();
                if (whId) {
                    $.getJSON(`/GRN/GetLocationComponentsByWarehouse?warehouseId=${whId}`, data => {
                        locations = data; // array of { locationComponentId, location }
                    });
                }
            });

            // 3) Build each item row, including Location cell + Select button
            function addRow(i, item) {
                const row = $(`
                <tr>
                  <td>
                    ${item.itemName}
                    <input type="hidden" name="GRNItems[${i}].ItemId" value="${item.itemId}" />
                  </td>
                  <td>
                    <span class="loc-display">—</span>
                    <input type="hidden" name="GRNItems[${i}].LocationComponentId" class="loc-id" />
                    <button type="button" class="btn btn-sm btn-outline-primary selectLocationBtn">
                      Select
                    </button>
                  </td>
                  <td>${item.quantity}</td>
                  <td>${item.unitName}</td>
                  <td>
                    <input type="number"
                           name="GRNItems[${i}].QuantityReceived"
                           class="form-control"
                           value="0" min="0" max="${item.remainingQuantity}" />
                  </td>
                  <td>${item.remainingQuantity}</td>
                  <td class="text-center">
                    <input type="checkbox"
                           name="GRNItems[${i}].Inspection"
                           class="inspectionCheckbox" />
                  </td>
                </tr>
              `);

                // “Select” button shows the modal and populates locationList
                row.find('.selectLocationBtn').click(() => {
                    currentRow = row;
                    $('#locationList').empty();
                    locations.forEach(loc => {
                        $('#locationList').append(`
                    <li class="list-group-item list-group-item-action"
                        data-id="${loc.locationComponentId}">
                      ${loc.location}
                    </li>`);
                    });
                    $('#locationModal').modal('show');
                });

                $('#itemRows').append(row);
            }

            // 4) When user picks a location in the modal
            $('#locationList').on('click', 'li', function () {
                const id = $(this).data('id'),
                    text = $(this).text();
                if (currentRow) {
                    currentRow.find('.loc-id').val(id);
                    currentRow.find('.loc-display').text(text);
                }
                $('#locationModal').modal('hide');
            });

            // 5) Supplier → Purchase Orders cascade
            $('#supplierDropdown').change(function () {
                const supplierId = $(this).val();
                $('#poDropdown').empty().append('<option value="">-- Select PO --</option>');
                $('#itemRows').empty();
                if (supplierId) {
                    $.getJSON(`/GRN/GetPurchaseOrdersBySupplier?supplierId=${supplierId}`, pos => {
                        $.each(pos, (i, po) => {
                            $('#poDropdown').append(`<option value="${po.purchaseOrderId}">${po.poNo}</option>`);
                        });
                    });
                }
            });

            // 6) “Check All” for inspection
            $('#checkAllInspection').change(function () {
                $('.inspectionCheckbox').prop('checked', $(this).prop('checked'));
            });

            // 7) Invoice date: default to yesterday & block future
            const invoiceDateInput = document.getElementById("InvoiceDate");
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            invoiceDateInput.value = yesterday.toISOString().split("T")[0];
            invoiceDateInput.addEventListener("change", function () {
                if (new Date(this.value) > yesterday) {
                    alert("Invoice Date must be at most one day earlier than today's date!");
                    this.value = yesterday.toISOString().split("T")[0];
                }
            });
        });
    </script>
}

