@model StoreManagement_Project.Models.PurchaseOrder

@{
    ViewData["Title"] = "Create Purchase Order";
    var suppliers = ViewBag.Suppliers as List<StoreManagement_Project.Models.Supplier>;
    var items = ViewBag.Items as List<StoreManagement_Project.Models.Item>;
    var units = ViewBag.Units as List<StoreManagement_Project.Models.Unit>;
    var warehouses = ViewBag.Warehouses as List<StoreManagement_Project.Models.Warehouse>;
    var carrencies = ViewBag.Currencies as List<StoreManagement_Project.Models.Currency>;
}

<h2>Create Purchase Order</h2>

<form asp-action="Create" method="post" id="poForm">
    <div asp-validation-summary="All" class="text-danger"></div>
    
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label>Supplier PO Number</label>
                <input type="text" class="form-control" value="@ViewBag.NextPONo" readonly />
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="POManualNumber" class="control-label">
                </label>
                <input asp-for="POManualNumber" class="form-control" placeholder="Enter PO Number">
                <span asp-validation-for="POManualNumber" class="text-danger"></span>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="SupplierId" class="control-label">Supplier</label>
                <select asp-for="SupplierId" class="form-control" required>
                    <option value="">-- Select Supplier --</option>
                    @foreach (var supplier in suppliers)
                    {
                        <option value="@supplier.SupplierId">@supplier.SupplierName</option>
                    }
                </select>
                <span asp-validation-for="SupplierId" class="text-danger"></span>
            </div>
        </div>        

    </div>   

    <div class="row">

        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="OrderDate" class="control-label">Order Date</label>
                <input asp-for="OrderDate" type="date" class="form-control" required
                       value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                <span asp-validation-for="OrderDate" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="WarehouseId" class="control-label">Warehouse</label>
                <select asp-for="WarehouseId" class="form-control" id="warehouseSelect" required readonly>
                <option value="">-- Select Warehouse --</option>
                @foreach (var warehouse in warehouses)
                {
                    <option value="@warehouse.WarehouseId" data-address="@warehouse.Address">
                        @warehouse.Name
                    </option>
                }
                </select>
                <span asp-validation-for="WarehouseId" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="ExpectedDeliveryDate" class="control-label">Expected Delivery</label>
                <input asp-for="ExpectedDeliveryDate" class="form-control" type="date" value="@DateTime.Today.AddDays(4).ToString("yyyy-MM-dd")" />
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="CurrencyId" class="control-label">Currency</label>
                <select asp-for="CurrencyId" class="form-control" id="currencySelect" required>
                    <option value="">-- Select Currency --</option>
                    @foreach (var currency in carrencies)
                    {
                        <option value="@currency.CurrencyId" data-exchangerate="@currency.ExchangeRate">@currency.NameOfCurrency (@currency.SymbolOfCurrency)</option>
                    }
                </select>
                <span asp-validation-for="CurrencyId" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <label for="exchangeRate">Exchange Rate</label>
                <input type="number" step="0.0001" min="0" class="form-control" id="exchangeRate" name="ExchangeRate" required />
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="Remarks">
                </label>
                <textarea asp-for="Remarks" class="form-control" placeholder="Enter any specific requirements or notes..."></textarea>
                <span asp-validation-for="Remarks" class="text-danger"></span>
            </div>
        </div>
    </div>


    <h4>Items</h4>
    <table class="table" id="itemsTable">
        <thead>
            <tr>
                <th>Item</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Unit</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr class="item-row">
                <td>
                    <select name="PurchaseOrderItem[0].ItemId" class="form-control item-select" required>
                        <option value="">-- Select Item --</option>
                        @foreach (var item in items)
                        {
                            <option value="@item.ItemId" 
                                    data-unit="@item.UnitId" 
                                    data-unitname="@item.Unit?.NameOfUnit">
                                @item.ItemName (@item.ItemCode)
                            </option>
                        }
                    </select>
                </td>
                <td>
                    <input name="PurchaseOrderItem[0].Quantity" type="number" min="1" 
                           class="form-control quantity" required value="1" />
                </td>
                <td>
                    <input name="PurchaseOrderItem[0].Price" type="number" step="0.01" min="0" 
                           class="form-control price" required value="0" />
                </td>
                <td>
                    <select name="PurchaseOrderItem[0].UnitId" class="form-control unit-select" required>
                        <option value="">-- Select Unit --</option>
                        @foreach (var unit in units)
                        {
                            <option value="@unit.UnitId">@unit.NameOfUnit</option>
                        }
                    </select>
                </td>
                <td class="total">0.00</td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">
                        <i class="fas fa-trash"></i> Remove
                    </button>
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4" class="text-right"><strong>Grand Total:</strong></td>
                <td id="grandTotal">0.00</td>
                <td></td>
            </tr>
        </tfoot>
    </table>

    <div class="form-group">
        <button type="button" class="btn btn-success" onclick="addRow()">
            <i class="fas fa-plus"></i> Add Item
        </button>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Save Purchase Order
        </button>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-times"></i> Cancel
        </a>

            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
    </div>

</form>

@section Scripts {
    <script>

        //     document.addEventListener("DOMContentLoaded", function () {
        //     const warehouseSelect = document.getElementById("warehouseSelect");
        //     const deliveryPointInput = document.getElementById("deliveryPoint");

        //     warehouseSelect.addEventListener("change", function () {
        //         const selectedOption = this.options[this.selectedIndex];
        //         const address = selectedOption.getAttribute("data-address");
        //         deliveryPointInput.value = address || "";
        //     });
        // });

        $(document).ready(function () {
            $('#ExpectedDeliveryDate').attr('min', new Date().toISOString().split("T")[0]);
        });

        //for Currency
        document.addEventListener("DOMContentLoaded", function () {
            const currencySelect = document.getElementById("currencySelect");
            const exchangeRateInput = document.getElementById("exchangeRate");

            // Base currency ID set koro (eta manually set koro)
            const baseCurrencyId = "1"; // Eta tomake database theke dynamically ante hobe

            currencySelect.addEventListener("change", function () {
                const selectedOption = this.options[this.selectedIndex];
                const exchangeRate = selectedOption.getAttribute("data-exchangerate");

                exchangeRateInput.value = exchangeRate || "";

                // Base currency hole field disable koro, na hole enable koro
                if (this.value === baseCurrencyId) {
                    exchangeRateInput.setAttribute("readonly", true);
                } else {
                    exchangeRateInput.removeAttribute("readonly");
                }
            });

            // Page load holeo check koro je base currency select kina
            if (currencySelect.value === baseCurrencyId) {
                exchangeRateInput.setAttribute("readonly", true);
            }
        });


        let rowIndex = 1;

        function addRowEventListeners(row) {
            const itemSelect = row.querySelector(".item-select");
            const quantityInput = row.querySelector(".quantity");
            const priceInput = row.querySelector(".price");
            const unitSelect = row.querySelector(".unit-select");

            itemSelect.addEventListener("change", function() {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption.dataset.unit) {
                    unitSelect.value = selectedOption.dataset.unit;
                }
                calculateRowTotal(row);
            });

            quantityInput.addEventListener("input", () => calculateRowTotal(row));
            priceInput.addEventListener("input", () => calculateRowTotal(row));
        }

        function calculateRowTotal(row) {
            const quantity = parseFloat(row.querySelector(".quantity").value) || 0;
            const price = parseFloat(row.querySelector(".price").value) || 0;
            const total = quantity * price;
            row.querySelector(".total").textContent = total.toFixed(2);
            calculateGrandTotal();
        }

        function calculateGrandTotal() {
            let grandTotal = 0;
            document.querySelectorAll(".item-row").forEach(row => {
                const totalText = row.querySelector(".total").textContent;
                grandTotal += parseFloat(totalText) || 0;
            });
            document.getElementById("grandTotal").textContent = grandTotal.toFixed(2);
        }

        function addRow() {
            const table = document.getElementById("itemsTable").getElementsByTagName("tbody")[0];
            const newRow = table.rows[0].cloneNode(true);
            const inputs = newRow.querySelectorAll("input, select");

            inputs.forEach(input => {
                let name = input.name;
                name = name.replace(/\[\d+\]/, `[${rowIndex}]`);
                input.name = name;
                if (input.type !== "hidden") input.value = "";
            });

            newRow.querySelector(".total").textContent = "0.00";
            table.appendChild(newRow);
            rowIndex++;
            addRowEventListeners(newRow);
        }

        function removeRow(button) {
            const row = button.closest("tr");
            const table = row.closest("tbody");
            if (table.rows.length > 1) {
                table.removeChild(row);
                calculateGrandTotal();
            }
        }

        // Initialize first row
        document.addEventListener("DOMContentLoaded", function() {
            addRowEventListeners(document.querySelector(".item-row"));
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

