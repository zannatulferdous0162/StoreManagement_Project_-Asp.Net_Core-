@model StoreManagement_Project.Models.Aisle

@{
    ViewData["Title"] = "Aisle Details";
}

<style>
    body {
        background-color: #f4f7fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .details-container {
        max-width: 800px;
        margin: 50px auto;
        background: #ffffff;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    h1 {
        color: #2c3e50;
        font-weight: 700;
        text-align: center;
        margin-bottom: 30px;
    }

    .dl-horizontal dt {
        font-weight: 600;
        color: #34495e;
        font-size: 1.1rem;
    }

    .dl-horizontal dd {
        color: #7f8c8d;
        font-size: 1rem;
        margin-bottom: 15px;
    }

    .btn-custom {
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-edit {
        background-color: #3498db;
        color: white;
    }

        .btn-edit:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

    .btn-back {
        background-color: #7f8c8d;
        color: white;
    }

        .btn-back:hover {
            background-color: #6c7a89;
            transform: translateY(-2px);
        }

    .icon {
        margin-right: 8px;
    }

    hr {
        border-top: 2px solid #ecf0f1;
        margin: 20px 0;
    }
</style>

<div class="details-container">
    <h1>Aisle Details</h1>
    <hr />
    <div>
        <dl class="dl-horizontal row">
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.AisleName)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.AisleName)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Remarks)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Remarks)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Warehouse)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Warehouse.WarehouseId)
            </dd>
        </dl>
    </div>
    <div class="mt-4 text-center">
        <a asp-action="Edit" asp-route-id="@Model?.AisleId" class="btn btn-custom btn-edit">
            <i class="fas fa-edit icon"></i> Edit
        </a>
        <a asp-action="Index" class="btn btn-custom btn-back">
            <i class="fas fa-arrow-left icon"></i> Back to List
        </a>
    </div>
</div>

@section Scripts {
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Wait for everything to load
        // document.addEventListener('DOMContentLoaded', function () {
        //     // Button click animations
        //     const buttons = document.querySelectorAll('.btn-custom');
        //     buttons.forEach(button => {
        //         button.addEventListener('click', function (e) {
        //             // Only animate if it's not a regular link
        //             if (!this.getAttribute('href').startsWith('#')) {
        //                 this.style.transform = 'scale(0.95)';
        //                 setTimeout(() => {
        //                     this.style.transform = 'scale(1)';
        //                 }, 100);
        //             }
        //         });
        //     });

        //     // Initialize Bootstrap dropdowns if they exist
        //     if (typeof bootstrap !== 'undefined') {
        //         var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
        //         var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
        //             return new bootstrap.Dropdown(dropdownToggleEl);
        //         });
        //     }
        // });


        document.addEventListener('DOMContentLoaded', () => {
            // Button animation
            const buttons = document.querySelectorAll('.btn-custom');
            buttons.forEach(button => {
                button.addEventListener('click', () => {
                    button.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        button.style.transform = 'scale(1)';
                    }, 100);
                });
            });

            // Warehouse dropdown
            const warehouseDropdown = document.querySelector('#warehouseDropdown');
            if (warehouseDropdown) {
                const bsDropdown = new bootstrap.Dropdown(warehouseDropdown);
                warehouseDropdown.addEventListener('click', (e) => {
                    e.preventDefault();
                    bsDropdown.toggle();
                });
                const dropdownMenu = document.querySelector('.dropdown-menu');
                dropdownMenu.addEventListener('click', (e) => {
                    e.stopPropagation();
                });
            }
        });
    </script>
}